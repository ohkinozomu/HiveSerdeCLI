/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package hiveSerdeCLI

import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.required
import org.apache.hadoop.hive.serde2.OpenCSVSerde
import java.util.Properties
import org.apache.hadoop.hive.serde.serdeConstants
import org.apache.hadoop.hive.serde2.AbstractSerDe
import org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
import org.apache.hadoop.io.Text
import java.io.File
import kotlin.system.exitProcess

class App {
    private fun openCSVDeserialize(columns: String, columnTypes: String, fileName: String) {
        val serdeLib = OpenCSVSerde()
        val props = Properties()
        props.setProperty(serdeConstants.LIST_COLUMNS, columns)
        props.setProperty(serdeConstants.LIST_COLUMN_TYPES, columnTypes)
        serdeLib.initialize(null, props, null)
        val text = File(fileName).readText()
        val `in` = Text(text)
        val row = serdeLib.deserialize(`in`) as List<*>
        println(row)
        println(row.size)
    }

    private fun lazySimpleDeserialize(columns: String, columnTypes: String, fileName: String) {
        val serdeLib = OpenCSVSerde()
        val props = Properties()
        props.setProperty(serdeConstants.LIST_COLUMNS, columns)
        props.setProperty(serdeConstants.LIST_COLUMN_TYPES, columnTypes)
        serdeLib.initialize(null, props, null)
        val text = File(fileName).readText()
        val `in` = Text(text)
        val row = serdeLib.deserialize(`in`) as List<*>
        println(row)
        println(row.size)
    }

    fun deserialize(serde: String, columns: String, columnTypes: String, fileName: String) {
        when (serde) {
            "OpenCSVSerde" -> {
                openCSVDeserialize(columns, columnTypes, fileName)
            }
            "LazySimpleSerde" -> {
                lazySimpleDeserialize(columns, columnTypes, fileName)
            }
            else -> {
                println("Invalid Serde Library: OpenCSVSerde and LazySimpleSerDe are supported.")
                exitProcess(1)
            }
        }
    }
}

fun main(args: Array<String>) {
    val parser = ArgParser("HiveSerdeCLI")
    val columns by parser.option(ArgType.String, shortName = "c", description = "Columns").required()
    val columnTypes by parser.option(ArgType.String, shortName = "ct", description = "Columns Types").required()
    val fileName by parser.option(ArgType.String, shortName = "f", description = "File Name").required()
    val serde by parser.option(ArgType.String, shortName = "s", description = "Serde Library").required()
    parser.parse(args)

    App().deserialize(serde, columns, columnTypes, fileName)
}
